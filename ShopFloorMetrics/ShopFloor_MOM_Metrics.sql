
CREATE OR REPLACE PROCEDURE REVOPS.VITALLY.REFRESH_SHOPFLOOR_MOM_METRICS()
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
  -- Step 1: Aggregate metrics at the Site level, with a window partition by SITE_ID
  CREATE OR REPLACE TEMPORARY TABLE temp_site_level_metrics AS
  WITH Site_Metrics_CTE AS (
    SELECT 
        SHOPFLOOR_METRICS.SITE_ID,
        SALESFORCE_MAPPING.SALESFORCE_ACCOUNT_ID,
        SHOPFLOOR_METRICS.MONTH_START,
        SUM(FINISHED_GOOD_PALLETS_PRODUCED) AS sum_FINISHED_GOOD_PALLETS_PRODUCED,
        LAG(SUM(FINISHED_GOOD_PALLETS_PRODUCED)) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_FINISHED_GOOD_PALLETS_PRODUCED,
        LAG(SUM(FINISHED_GOOD_PALLETS_PRODUCED), 12) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_year_FINISHED_GOOD_PALLETS_PRODUCED,
        SUM(SHIPMENTS_SHIPPED) AS sum_SHIPMENTS_SHIPPED,
        LAG(SUM(SHIPMENTS_SHIPPED)) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_SHIPMENTS_SHIPPED,
        LAG(SUM(SHIPMENTS_SHIPPED), 12) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_year_SHIPMENTS_SHIPPED,
        SUM(RECEIPTS_RECEIVED) AS sum_RECEIPTS_RECEIVED,
        LAG(SUM(RECEIPTS_RECEIVED)) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_RECEIPTS_RECEIVED,
        LAG(SUM(RECEIPTS_RECEIVED), 12) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_year_RECEIPTS_RECEIVED,
        SUM(WORK_ORDERS_CREATED) AS sum_WORK_ORDERS_CREATED,
        LAG(SUM(WORK_ORDERS_CREATED)) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_WORK_ORDERS_CREATED,
        LAG(SUM(WORK_ORDERS_CREATED), 12) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_year_WORK_ORDERS_CREATED,
        SUM(IST_COUNT) AS sum_IST_COUNT,
        LAG(SUM(IST_COUNT)) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_IST_COUNT,
        LAG(SUM(IST_COUNT), 12) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_year_IST_COUNT,
        SUM(OST_COUNT) AS sum_OST_COUNT,
        LAG(SUM(OST_COUNT)) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_OST_COUNT,
        LAG(SUM(OST_COUNT), 12) OVER (PARTITION BY SHOPFLOOR_METRICS.SITE_ID ORDER BY MONTH_START ASC) AS prev_year_OST_COUNT
    FROM 
        REVOPS.VITALLY.SHOPFLOOR_METRICS
        LEFT JOIN REVOPS.VITALLY.SALESFORCE_MAPPING ON SHOPFLOOR_METRICS.SITE_ID = SALESFORCE_MAPPING.SITE_ID
    GROUP BY 
        SHOPFLOOR_METRICS.SITE_ID, SALESFORCE_MAPPING.SALESFORCE_ACCOUNT_ID, MONTH_START
  )
  SELECT 
    SALESFORCE_ACCOUNT_ID,
    MONTH_START,
    SUM(sum_FINISHED_GOOD_PALLETS_PRODUCED) AS sum_FINISHED_GOOD_PALLETS_PRODUCED,
    SUM(prev_FINISHED_GOOD_PALLETS_PRODUCED) AS prev_FINISHED_GOOD_PALLETS_PRODUCED,
    SUM(prev_year_FINISHED_GOOD_PALLETS_PRODUCED) AS prev_year_FINISHED_GOOD_PALLETS_PRODUCED,
    CASE 
        WHEN SUM(prev_FINISHED_GOOD_PALLETS_PRODUCED) = 0 THEN NULL
        ELSE (SUM(sum_FINISHED_GOOD_PALLETS_PRODUCED) / SUM(prev_FINISHED_GOOD_PALLETS_PRODUCED) - 1) * 100
    END AS mom_FINISHED_GOOD_PALLETS_PRODUCED,
    CASE 
        WHEN SUM(prev_year_FINISHED_GOOD_PALLETS_PRODUCED) = 0 THEN NULL
        ELSE (SUM(sum_FINISHED_GOOD_PALLETS_PRODUCED) / SUM(prev_year_FINISHED_GOOD_PALLETS_PRODUCED) - 1) * 100
    END AS yoy_FINISHED_GOOD_PALLETS_PRODUCED,
    SUM(sum_SHIPMENTS_SHIPPED) AS sum_SHIPMENTS_SHIPPED,
    SUM(prev_SHIPMENTS_SHIPPED) AS prev_SHIPMENTS_SHIPPED,
    SUM(prev_year_SHIPMENTS_SHIPPED) AS prev_year_SHIPMENTS_SHIPPED,
    CASE 
        WHEN SUM(prev_SHIPMENTS_SHIPPED) = 0 THEN NULL
        ELSE (SUM(sum_SHIPMENTS_SHIPPED) / SUM(prev_SHIPMENTS_SHIPPED) - 1) * 100
    END AS mom_SHIPMENTS_SHIPPED,
    CASE 
        WHEN SUM(prev_year_SHIPMENTS_SHIPPED) = 0 THEN NULL
        ELSE (SUM(sum_SHIPMENTS_SHIPPED) / SUM(prev_year_SHIPMENTS_SHIPPED) - 1) * 100
    END AS yoy_SHIPMENTS_SHIPPED,
    SUM(sum_RECEIPTS_RECEIVED) AS sum_RECEIPTS_RECEIVED,
    SUM(prev_RECEIPTS_RECEIVED) AS prev_RECEIPTS_RECEIVED,
    SUM(prev_year_RECEIPTS_RECEIVED) AS prev_year_RECEIPTS_RECEIVED,
    CASE 
        WHEN SUM(prev_RECEIPTS_RECEIVED) = 0 THEN NULL
        ELSE (SUM(sum_RECEIPTS_RECEIVED) / SUM(prev_RECEIPTS_RECEIVED) - 1) * 100
    END AS mom_RECEIPTS_RECEIVED,
    CASE 
        WHEN SUM(prev_year_RECEIPTS_RECEIVED) = 0 THEN NULL
        ELSE (SUM(sum_RECEIPTS_RECEIVED) / SUM(prev_year_RECEIPTS_RECEIVED) - 1) * 100
    END AS yoy_RECEIPTS_RECEIVED,
    SUM(sum_WORK_ORDERS_CREATED) AS sum_WORK_ORDERS_CREATED,
    SUM(prev_WORK_ORDERS_CREATED) AS prev_WORK_ORDERS_CREATED,
    SUM(prev_year_WORK_ORDERS_CREATED) AS prev_year_WORK_ORDERS_CREATED,
    CASE 
        WHEN SUM(prev_WORK_ORDERS_CREATED) = 0 THEN NULL
        ELSE (SUM(sum_WORK_ORDERS_CREATED) / SUM(prev_WORK_ORDERS_CREATED) - 1) * 100
    END AS mom_WORK_ORDERS_CREATED,
    CASE 
        WHEN SUM(prev_year_WORK_ORDERS_CREATED) = 0 THEN NULL
        ELSE (SUM(sum_WORK_ORDERS_CREATED) / SUM(prev_year_WORK_ORDERS_CREATED) - 1) * 100
    END AS yoy_WORK_ORDERS_CREATED,
    SUM(sum_IST_COUNT) AS sum_IST_COUNT,
    SUM(prev_IST_COUNT) AS prev_IST_COUNT,
    SUM(prev_year_IST_COUNT) AS prev_year_IST_COUNT,
    CASE 
        WHEN SUM(prev_IST_COUNT) = 0 THEN NULL
        ELSE (SUM(sum_IST_COUNT) / SUM(prev_IST_COUNT) - 1) * 100
    END AS mom_IST_COUNT,
    CASE 
        WHEN SUM(prev_year_IST_COUNT) = 0 THEN NULL
        ELSE (SUM(sum_IST_COUNT) / SUM(prev_year_IST_COUNT) - 1) * 100
    END AS yoy_IST_COUNT,
    SUM(sum_OST_COUNT) AS sum_OST_COUNT,
    SUM(prev_OST_COUNT) AS prev_OST_COUNT,
    SUM(prev_year_OST_COUNT) AS prev_year_OST_COUNT,
    CASE 
        WHEN SUM(prev_OST_COUNT) = 0 THEN NULL
        ELSE (SUM(sum_OST_COUNT) / SUM(prev_OST_COUNT) - 1) * 100
    END AS mom_OST_COUNT,
    CASE 
        WHEN SUM(prev_year_OST_COUNT) = 0 THEN NULL
        ELSE (SUM(sum_OST_COUNT) / SUM(prev_year_OST_COUNT) - 1) * 100
    END AS yoy_OST_COUNT,
    CURRENT_TIMESTAMP() AS UPDATED_AT
  FROM 
    Site_Metrics_CTE
  GROUP BY 
    SALESFORCE_ACCOUNT_ID, MONTH_START;

  -- Create a temp table to store existing records
  CREATE OR REPLACE TEMPORARY TABLE existing_records AS
  SELECT MONTH_START, SALESFORCE_ACCOUNT_ID 
  FROM REVOPS.VITALLY.SHOPFLOOR_MOM_METRICS_TABLE;

  -- Insert into final table
  INSERT INTO REVOPS.VITALLY.SHOPFLOOR_MOM_METRICS_TABLE
  (
    SALESFORCE_ACCOUNT_ID,
    MONTH_START,
    SUM_FINISHED_GOOD_PALLETS_PRODUCED,
    PREV_FINISHED_GOOD_PALLETS_PRODUCED,
    PREV_YEAR_FINISHED_GOOD_PALLETS_PRODUCED,
    MOM_FINISHED_GOOD_PALLETS_PRODUCED,
    YOY_FINISHED_GOOD_PALLETS_PRODUCED,
    SUM_SHIPMENTS_SHIPPED,
    PREV_SHIPMENTS_SHIPPED,
    PREV_YEAR_SHIPMENTS_SHIPPED,
    MOM_SHIPMENTS_SHIPPED,
    YOY_SHIPMENTS_SHIPPED,
    SUM_RECEIPTS_RECEIVED,
    PREV_RECEIPTS_RECEIVED,
    PREV_YEAR_RECEIPTS_RECEIVED,
    MOM_RECEIPTS_RECEIVED,
    YOY_RECEIPTS_RECEIVED,
    SUM_WORK_ORDERS_CREATED,
    PREV_WORK_ORDERS_CREATED,
    PREV_YEAR_WORK_ORDERS_CREATED,
    MOM_WORK_ORDERS_CREATED,
    YOY_WORK_ORDERS_CREATED,
    SUM_IST_COUNT,
    PREV_IST_COUNT,
    PREV_YEAR_IST_COUNT,
    MOM_IST_COUNT,
    YOY_IST_COUNT,
    SUM_OST_COUNT,
    PREV_OST_COUNT,
    PREV_YEAR_OST_COUNT,
    MOM_OST_COUNT,
    YOY_OST_COUNT,
    UPDATED_AT
  )
  SELECT 
    t.SALESFORCE_ACCOUNT_ID,
    t.MONTH_START,
    t.sum_FINISHED_GOOD_PALLETS_PRODUCED,
    t.prev_FINISHED_GOOD_PALLETS_PRODUCED,
    t.prev_year_FINISHED_GOOD_PALLETS_PRODUCED,
    t.mom_FINISHED_GOOD_PALLETS_PRODUCED,
    t.yoy_FINISHED_GOOD_PALLETS_PRODUCED,
    t.sum_SHIPMENTS_SHIPPED,
    t.prev_SHIPMENTS_SHIPPED,
    t.prev_year_SHIPMENTS_SHIPPED,
    t.mom_SHIPMENTS_SHIPPED,
    t.yoy_SHIPMENTS_SHIPPED,
    t.sum_RECEIPTS_RECEIVED,
    t.prev_RECEIPTS_RECEIVED,
    t.prev_year_RECEIPTS_RECEIVED,
    t.mom_RECEIPTS_RECEIVED,
    t.yoy_RECEIPTS_RECEIVED,
    t.sum_WORK_ORDERS_CREATED,
    t.prev_WORK_ORDERS_CREATED,
    t.prev_year_WORK_ORDERS_CREATED,
    t.mom_WORK_ORDERS_CREATED,
    t.yoy_WORK_ORDERS_CREATED,
    t.sum_IST_COUNT,
    t.prev_IST_COUNT,
    t.prev_year_IST_COUNT,
    t.mom_IST_COUNT,
    t.yoy_IST_COUNT,
    t.sum_OST_COUNT,
    t.prev_OST_COUNT,
    t.prev_year_OST_COUNT,
    t.mom_OST_COUNT,
    t.yoy_OST_COUNT,
    t.UPDATED_AT
  FROM temp_site_level_metrics t
  LEFT JOIN existing_records e 
    ON t.MONTH_START = e.MONTH_START 
    AND t.SALESFORCE_ACCOUNT_ID = e.SALESFORCE_ACCOUNT_ID
  WHERE 
    t.MONTH_START <= DATE_TRUNC(MONTH, CURRENT_DATE())
     AND (e.SALESFORCE_ACCOUNT_ID IS NULL 
       OR t.MONTH_START = DATE_TRUNC("MONTH", CURRENT_DATE()))
    ;

  RETURN ''Data refreshed successfully'';
END;
';