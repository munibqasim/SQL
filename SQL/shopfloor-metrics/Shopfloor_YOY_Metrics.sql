CREATE OR REPLACE PROCEDURE REVOPS.VITALLY.REFRESH_SHOPFLOOR_YOY_METRICS()
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
  CREATE OR REPLACE TEMPORARY TABLE temp_rolling_metrics AS
  WITH latest_metrics AS (
    SELECT 
      SALESFORCE_ACCOUNT_ID,
      MONTH_START,
      sum_FINISHED_GOOD_PALLETS_PRODUCED,
      sum_SHIPMENTS_SHIPPED,
      sum_RECEIPTS_RECEIVED,
      sum_WORK_ORDERS_CREATED,
      sum_IST_COUNT,
      sum_OST_COUNT
    FROM REVOPS.VITALLY.SHOPFLOOR_MOM_METRICS_TABLE sm
    WHERE MONTH_START < DATE_TRUNC(MONTH, CURRENT_DATE)
    QUALIFY ROW_NUMBER() OVER (PARTITION BY SALESFORCE_ACCOUNT_ID, MONTH_START ORDER BY UPDATED_AT DESC) = 1
  ),
  rolling_metrics AS (
    SELECT 
      SALESFORCE_ACCOUNT_ID,
      MONTH_START,
      sum_FINISHED_GOOD_PALLETS_PRODUCED,
      sum_SHIPMENTS_SHIPPED,
      sum_RECEIPTS_RECEIVED,
      sum_WORK_ORDERS_CREATED,
      sum_IST_COUNT,
      sum_OST_COUNT,
      SUM(sum_FINISHED_GOOD_PALLETS_PRODUCED) OVER 
        (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED,
      SUM(sum_SHIPMENTS_SHIPPED) OVER 
        (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS rolling_12m_SHIPMENTS_SHIPPED,
      SUM(sum_RECEIPTS_RECEIVED) OVER 
        (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS rolling_12m_RECEIPTS_RECEIVED,
      SUM(sum_WORK_ORDERS_CREATED) OVER 
        (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS rolling_12m_WORK_ORDERS_CREATED,
      SUM(sum_IST_COUNT) OVER 
        (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS rolling_12m_IST_COUNT,
      SUM(sum_OST_COUNT) OVER 
        (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS rolling_12m_OST_COUNT
    FROM latest_metrics
  )
  SELECT
    SALESFORCE_ACCOUNT_ID,
    MONTH_START,
    sum_FINISHED_GOOD_PALLETS_PRODUCED,
    rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED,
    LAG(rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) AS prev_year_rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED,
    CASE 
      WHEN LAG(rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) = 0 THEN 0
      ELSE ((rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED - 
             LAG(rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) / 
            LAG(rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) * 100
    END AS yoy_FINISHED_GOOD_PALLETS_PRODUCED,
    sum_SHIPMENTS_SHIPPED,
    rolling_12m_SHIPMENTS_SHIPPED,
    LAG(rolling_12m_SHIPMENTS_SHIPPED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) AS prev_year_rolling_12m_SHIPMENTS_SHIPPED,
    CASE 
      WHEN LAG(rolling_12m_SHIPMENTS_SHIPPED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) = 0 THEN 0 
      ELSE ((rolling_12m_SHIPMENTS_SHIPPED - 
             LAG(rolling_12m_SHIPMENTS_SHIPPED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) / 
            LAG(rolling_12m_SHIPMENTS_SHIPPED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) * 100
    END AS yoy_SHIPMENTS_SHIPPED,
    sum_RECEIPTS_RECEIVED,
    rolling_12m_RECEIPTS_RECEIVED,
    LAG(rolling_12m_RECEIPTS_RECEIVED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) AS prev_year_rolling_12m_RECEIPTS_RECEIVED,
    CASE 
      WHEN LAG(rolling_12m_RECEIPTS_RECEIVED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) = 0 THEN 0
      ELSE ((rolling_12m_RECEIPTS_RECEIVED - 
             LAG(rolling_12m_RECEIPTS_RECEIVED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) / 
            LAG(rolling_12m_RECEIPTS_RECEIVED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) * 100
    END AS yoy_RECEIPTS_RECEIVED,
    sum_WORK_ORDERS_CREATED,
    rolling_12m_WORK_ORDERS_CREATED,
    LAG(rolling_12m_WORK_ORDERS_CREATED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) AS prev_year_rolling_12m_WORK_ORDERS_CREATED,
    CASE 
      WHEN LAG(rolling_12m_WORK_ORDERS_CREATED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) = 0 THEN 0
      ELSE ((rolling_12m_WORK_ORDERS_CREATED - 
             LAG(rolling_12m_WORK_ORDERS_CREATED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) / 
            LAG(rolling_12m_WORK_ORDERS_CREATED, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) * 100
    END AS yoy_WORK_ORDERS_CREATED,
    sum_IST_COUNT,
    rolling_12m_IST_COUNT,
    LAG(rolling_12m_IST_COUNT, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) AS prev_year_rolling_12m_IST_COUNT,
    CASE 
      WHEN LAG(rolling_12m_IST_COUNT, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) = 0 THEN 0
      ELSE ((rolling_12m_IST_COUNT - 
             LAG(rolling_12m_IST_COUNT, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) / 
            LAG(rolling_12m_IST_COUNT, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) * 100
    END AS yoy_IST_COUNT,
    sum_OST_COUNT,
    rolling_12m_OST_COUNT,
    LAG(rolling_12m_OST_COUNT, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) AS prev_year_rolling_12m_OST_COUNT,
    CASE 
      WHEN LAG(rolling_12m_OST_COUNT, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START) = 0 THEN 0
      ELSE ((rolling_12m_OST_COUNT - 
             LAG(rolling_12m_OST_COUNT, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) / 
            LAG(rolling_12m_OST_COUNT, 11) OVER (PARTITION BY SALESFORCE_ACCOUNT_ID ORDER BY MONTH_START)) * 100
    END AS yoy_OST_COUNT,
    CURRENT_TIMESTAMP AS UPDATED_AT
  FROM rolling_metrics;

  MERGE INTO REVOPS.VITALLY.SHOPFLOOR_YOY_METRICS_TABLE AS target
  USING temp_rolling_metrics AS source
  ON target.SALESFORCE_ACCOUNT_ID = source.SALESFORCE_ACCOUNT_ID 
  AND target.MONTH_START = source.MONTH_START
  WHEN MATCHED THEN UPDATE SET
    sum_FINISHED_GOOD_PALLETS_PRODUCED = source.sum_FINISHED_GOOD_PALLETS_PRODUCED,
    rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED = source.rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED,
    prev_year_rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED = source.prev_year_rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED,
    yoy_FINISHED_GOOD_PALLETS_PRODUCED = source.yoy_FINISHED_GOOD_PALLETS_PRODUCED,
    sum_SHIPMENTS_SHIPPED = source.sum_SHIPMENTS_SHIPPED,
    rolling_12m_SHIPMENTS_SHIPPED = source.rolling_12m_SHIPMENTS_SHIPPED,
    prev_year_rolling_12m_SHIPMENTS_SHIPPED = source.prev_year_rolling_12m_SHIPMENTS_SHIPPED,
    yoy_SHIPMENTS_SHIPPED = source.yoy_SHIPMENTS_SHIPPED,
    sum_RECEIPTS_RECEIVED = source.sum_RECEIPTS_RECEIVED,
    rolling_12m_RECEIPTS_RECEIVED = source.rolling_12m_RECEIPTS_RECEIVED,
    prev_year_rolling_12m_RECEIPTS_RECEIVED = source.prev_year_rolling_12m_RECEIPTS_RECEIVED,
    yoy_RECEIPTS_RECEIVED = source.yoy_RECEIPTS_RECEIVED,
    sum_WORK_ORDERS_CREATED = source.sum_WORK_ORDERS_CREATED,
    rolling_12m_WORK_ORDERS_CREATED = source.rolling_12m_WORK_ORDERS_CREATED,
    prev_year_rolling_12m_WORK_ORDERS_CREATED = source.prev_year_rolling_12m_WORK_ORDERS_CREATED,
    yoy_WORK_ORDERS_CREATED = source.yoy_WORK_ORDERS_CREATED,
    sum_IST_COUNT = source.sum_IST_COUNT,
    rolling_12m_IST_COUNT = source.rolling_12m_IST_COUNT,
    prev_year_rolling_12m_IST_COUNT = source.prev_year_rolling_12m_IST_COUNT,
    yoy_IST_COUNT = source.yoy_IST_COUNT,
    sum_OST_COUNT = source.sum_OST_COUNT,
    rolling_12m_OST_COUNT = source.rolling_12m_OST_COUNT,
    prev_year_rolling_12m_OST_COUNT = source.prev_year_rolling_12m_OST_COUNT,
    yoy_OST_COUNT = source.yoy_OST_COUNT,
    UPDATED_AT = source.UPDATED_AT
  WHEN NOT MATCHED THEN 
  INSERT (
    SALESFORCE_ACCOUNT_ID,
    MONTH_START,
    sum_FINISHED_GOOD_PALLETS_PRODUCED,
    rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED,
    prev_year_rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED,
    yoy_FINISHED_GOOD_PALLETS_PRODUCED,
    sum_SHIPMENTS_SHIPPED,
    rolling_12m_SHIPMENTS_SHIPPED,
    prev_year_rolling_12m_SHIPMENTS_SHIPPED,
    yoy_SHIPMENTS_SHIPPED,
    sum_RECEIPTS_RECEIVED,
    rolling_12m_RECEIPTS_RECEIVED,
    prev_year_rolling_12m_RECEIPTS_RECEIVED,
    yoy_RECEIPTS_RECEIVED,
    sum_WORK_ORDERS_CREATED,
    rolling_12m_WORK_ORDERS_CREATED,
    prev_year_rolling_12m_WORK_ORDERS_CREATED,
    yoy_WORK_ORDERS_CREATED,
    sum_IST_COUNT,
    rolling_12m_IST_COUNT,
    prev_year_rolling_12m_IST_COUNT,
    yoy_IST_COUNT,
    sum_OST_COUNT,
    rolling_12m_OST_COUNT,
    prev_year_rolling_12m_OST_COUNT,
    yoy_OST_COUNT,
    UPDATED_AT
  )
  VALUES (
    source.SALESFORCE_ACCOUNT_ID,
    source.MONTH_START,
    source.sum_FINISHED_GOOD_PALLETS_PRODUCED,
    source.rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED,
    source.prev_year_rolling_12m_FINISHED_GOOD_PALLETS_PRODUCED,
    source.yoy_FINISHED_GOOD_PALLETS_PRODUCED,
    source.sum_SHIPMENTS_SHIPPED,
    source.rolling_12m_SHIPMENTS_SHIPPED,
    source.prev_year_rolling_12m_SHIPMENTS_SHIPPED,
    source.yoy_SHIPMENTS_SHIPPED,
    source.sum_RECEIPTS_RECEIVED,
    source.rolling_12m_RECEIPTS_RECEIVED,
    source.prev_year_rolling_12m_RECEIPTS_RECEIVED,
    source.yoy_RECEIPTS_RECEIVED,
    source.sum_WORK_ORDERS_CREATED,
    source.rolling_12m_WORK_ORDERS_CREATED,
    source.prev_year_rolling_12m_WORK_ORDERS_CREATED,
    source.yoy_WORK_ORDERS_CREATED,
    source.sum_IST_COUNT,
    source.rolling_12m_IST_COUNT,
    source.prev_year_rolling_12m_IST_COUNT,
    source.yoy_IST_COUNT,
    source.sum_OST_COUNT,
    source.rolling_12m_OST_COUNT,
    source.prev_year_rolling_12m_OST_COUNT,
    source.yoy_OST_COUNT,
    source.UPDATED_AT
  );

  RETURN ''Data refreshed successfully'';
END;
';